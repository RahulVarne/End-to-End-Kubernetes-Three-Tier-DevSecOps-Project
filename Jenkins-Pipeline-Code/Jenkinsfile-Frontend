pipeline {
    agent any
    tools {
        nodejs 'nodejs'  // Ensure NodeJS tool is correctly configured in Jenkins
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'  // SonarQube Scanner
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "545009863897.dkr.ecr.us-east-1.amazonaws.com/frontend"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()  // Clean the workspace before starting
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'master', credentialsId: 'github', url: 'https://github.com/RahulVarne/End-to-End-Kubernetes-Three-Tier-DevSecOps-Project.git'
            }
        }

        // **Set AWS Credentials Stage**
        stage('Set AWS Credentials') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws credentials']]) {
                    sh '''
                        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                        export AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION
                        
                        # Verify credentials by fetching caller identity
                        aws sts get-caller-identity || exit 1
                    '''
                }
            }
        }

        // **SonarQube Analysis (after AWS credentials are set)**
        stage('SonarQube Analysis') {
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' 
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=frontend \
                            -Dsonar.projectKey=frontend
                        '''
                    }
                }
            }
        }
        
        // **Quality Gate (after SonarQube Analysis)**
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'  // Ensure the quality gate is checked
                }
            }
        }
        
        // **Trivy File Scan (after Quality Gate)**
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'  // Scan files for vulnerabilities
                }
            }
        }

        // **Docker Image Build (after Trivy File Scan)**
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/frontend') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh "docker build -t frontend:${env.BUILD_NUMBER} ."  // Build the Docker image
                    }
                }
            }
        }

        // **ECR Image Pushing (after Docker Image Build)**
        stage("ECR Image Pushing") {
            steps {
                script {
                    // Login to AWS ECR using withCredentials to inject AWS credentials
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws credentials']]) {
                        sh(script: "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${REPOSITORY_URI}")
                        
                        def ECR_IMAGE_URI = "${REPOSITORY_URI}:${env.BUILD_NUMBER}"

                        // Delete the existing image in ECR (if any)
                        sh(script: """
                            aws ecr describe-images --repository-name frontend --query "imageDetails[?imageTags[?contains(@, 'frontend')]].imageDigest" --output text | \
                            xargs -I {} aws ecr batch-delete-image --repository-name frontend --image-ids imageDigest={}
                        """)
                        
                        // Tag and push the Docker image to ECR
                        sh(script: "docker tag frontend:${env.BUILD_NUMBER} ${ECR_IMAGE_URI}")
                        sh(script: "docker push ${ECR_IMAGE_URI}")

                        // Trivy scan the image for vulnerabilities
                        sh(script: "trivy image ${ECR_IMAGE_URI} > trivyimage.txt")
                    }
                }
            }
        }

        // **Update Deployment File (after pushing the Docker image)**
        stage('Update Deployment File') {
            environment {
                GIT_REPO_NAME = "End-to-End-Kubernetes-Three-Tier-DevSecOps-Project"
                GIT_USER_NAME = "RahulVarne"
            }
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    withCredentials([usernamePassword(credentialsId: 'my-github', usernameVariable: 'GITHUB_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                        script {
                            // Now you can use GITHUB_USERNAME and GITHUB_TOKEN for git operations
                            sh '''
                                git config user.email "rahulvarne16@gmail.com"
                                git config user.name "${GITHUB_USERNAME}"
                                BUILD_NUMBER=${BUILD_NUMBER}
                                
                                # Debugging: Print the contents of deployment.yaml to check structure
                                cat deployment.yaml
                                
                                # Extract the image tag from deployment.yaml
                                imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml || echo "")

                                # Check if imageTag is empty and handle the case
                                if [ -z "$imageTag" ]; then
                                    echo "Error: imageTag not found in deployment.yaml"
                                    exit 1  # Exit with an error if the imageTag is empty
                                fi

                                # Update the image tag in deployment.yaml
                                sed -i "s|545009863897.dkr.ecr.us-east-1.amazonaws.com/frontend:${imageTag}|545009863897.dkr.ecr.us-east-1.amazonaws.com/frontend:${BUILD_NUMBER}|" deployment.yaml
                                git add deployment.yaml
                                git commit -m "Updated frontend deployment image to version ${BUILD_NUMBER}"
                                git push https://${GITHUB_USERNAME}:${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:master
                            '''
                        }
                    }
                }
            }
        }

stage('Kubernetes Deployment') {
    steps {
        script {
            // **Fetch AWS Credentials for EKS Authentication**
            withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws credentials']]) {
                sh '''
                    aws eks update-kubeconfig --region us-east-1 --name dev-medium-eks-cluster
                '''
            }

            // Now you can run kubectl commands as normal
            withEnv(["REPOSITORY_URI=${REPOSITORY_URI}", "BUILD_NUMBER=${env.BUILD_NUMBER}"]) {
                sh """
                    aws eks update-kubeconfig --region us-east-1 --name dev-medium-eks-cluster
                    
                    # Create the 'three-tier' namespace if it does not exist
                    kubectl create namespace three-tier || echo 'Namespace three-tier already exists'

                    # Check if the 'frontend' deployment exists
                    kubectl get deployments frontend -n three-tier || { 
                        echo 'Deployment not found. Creating it...'; 
                        kubectl apply -f Kubernetes-Manifests-file/Frontend/deployment.yaml -n three-tier
                    }

                    # Update the image in the deployment
                    kubectl set image deployment/frontend frontend=${REPOSITORY_URI}:${env.BUILD_NUMBER} -n three-tier --record
                    kubectl rollout status deployment/frontend -n three-tier
                """
            }
        }
    }
}


    }
}
